
package gov.nasa.pds;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;
import java.util.zip.DataFormatException;
import java.util.zip.Inflater;

import javax.xml.namespace.QName;
import javax.activation.DataHandler;

import org.apache.commons.io.IOUtils;

/**
 * This class was generated by Apache CXF 2.5.2
 * 2012-04-24T11:14:09.180+03:00
 * Generated source version: 2.5.2
 *
 */
public final class PlanetaryDataSystemSEI_PlanetaryDataSystemPort_Client {

    private static final QName SERVICE_NAME = new QName("http://pds.nasa.gov/", "PlanetaryDataSystemService");

    private PlanetaryDataSystemSEI_PlanetaryDataSystemPort_Client() {
    }

    public static void main(String args[]) throws java.lang.Exception {
        URL wsdlURL = PlanetaryDataSystemService.WSDL_LOCATION;
        if (args.length > 0 && args[0] != null && !"".equals(args[0])) {
            File wsdlFile = new File(args[0]);
            try {
                if (wsdlFile.exists()) {
                    wsdlURL = wsdlFile.toURI().toURL();
                } else {
                    wsdlURL = new URL(args[0]);
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
        }

        PlanetaryDataSystemService ss = new PlanetaryDataSystemService(wsdlURL, SERVICE_NAME);
        PlanetaryDataSystemSEI port = ss.getPlanetaryDataSystemPort();

        SearchResults results = null;

        // 1. global search example for the given text pattern
        System.out.println("1. global search example for the given text pattern");
        {
            String searchPattern = "deep";
            System.out.println("search text = " + searchPattern + "\n");

            results = port.searchEntities(searchPattern, null);
            printSearchResults(results);
        }

        // 2. get missions and instruments detailed info from obtained results
        System.out.println("2. extract missions and instruments data from obtained results");
        if (results != null) {
            List<Object> missionsInfo = results.getMissions().getResults();
            if (missionsInfo != null) {
                for (Object info : missionsInfo) {
                    Mission mission = port.getMission(((EntityInfo)info).getId());

                    // TODO: here you can examine various fields of mission object

                    // for example, start date
                    if (mission.getStartDate() != null) {
                        System.out.println("mission start date " + mission.getStartDate());
                    }
                }
            }

            List<Object> instrumentsInfo = results.getInstruments().getResults();
            if (instrumentsInfo != null) {
                for (Object info : instrumentsInfo) {
                    Instrument instrument = port.getInstrument(((EntityInfo)info).getId());

                    // TODO: here you can examine various fields of instrument object

                    // for example, description
                    if (instrument.getDescription() != null) {
                        System.out.println("instrument description: " + instrument.getDescription());
                    }
                }
            }
        }

        // 3. search all missions
        System.out.println("3. Get all missions");
        PagedResults allMissionsInfo = port.getMissionsInfo(null, null);
        System.out.println("count: " + allMissionsInfo.getTotal());
        for (Object info : allMissionsInfo.getResults()) {
            EntityInfo missionInfo = (EntityInfo)info;
            System.out.println("mission name: " + missionInfo.getName() + ", id = " + missionInfo.getId());
        }

        // 4. search all targets
        System.out.println("4. Get all targets");
        PagedResults allTargetsInfo = port.getTargetsInfo(null, null);
        System.out.println("count: " + allTargetsInfo.getTotal());
        for (Object info : allTargetsInfo.getResults()) {
            EntityInfo targetInfo = (EntityInfo)info;
            System.out.println("target name: " + targetInfo.getName() + ", id = " + targetInfo.getId());
        }

        // 5. get list of images for the dataset with the given id
        System.out.println("\n5. Get images for the dataset with the given id");
        long sampleDataSetId = 4L; // 'ds1-c-micas-5-borrelly-dem-v1.0' dataset
        //Restriction restriction = new Restriction("DataSet", sampleDataSetId);
        Restriction restriction = new Restriction();
        restriction.setRestrictionEntityClass("DataSet");
        restriction.setRestrictionEntityId(sampleDataSetId);
        // NOTE: we don't use page parameter here (null) but if you expect that a lot of objects
        // can be returned then you should specify pagination (for example, some datasets can have
        // thousands of images).
        PagedResults imagesInfo = port.getImagesInfo(null, restriction);
        printPagedResults(imagesInfo);

        // 6. get all images for missions which have 'DEEP' in its name (so, we will get all images for
        // 'DEEP SPACE 1' and 'DEEP IMPACT' missions. Since, there are a lot of them we specify pagination.
        System.out.println("\n6. Get images for the missions with DEEP in name");
        PagedResults deepMissions = port.searchEntitiesByType("Mission", "DEEP", null, null);
        if (deepMissions.getResults().size() > 0) {
            Page page = new Page();
            page.setPageNumber(1);
            page.setItemsPerPage(20);
            for (Object info : deepMissions.getResults()) {
                EntityInfo missionInfo = (EntityInfo)info;
                Restriction missionRestriction = new Restriction();
                missionRestriction.setRestrictionEntityClass("Mission");
                missionRestriction.setRestrictionEntityId(missionInfo.getId());
                PagedResults missionImages = port.getImagesInfo(page,  missionRestriction);
                printPagedResults(missionImages);

                // TODO: here you have ids of the images of interest. So, at this point you can
                // use port.getDataFile(id) to get DataFile object for the image.
            }
        }

        // 7. binary file reading example.

        // In database created from 19_datasets.sql  it's g20050624_0001_a.fit image,
        // it's size is 1056960 bytes.
        System.out.println("\n7. Binary file reading example");
        WsDataFile dataFile = port.getDataFile(58L);

        // a. without compression
        //DataHandler handler = dataFile.getDataHandler();
        //InputStream is = handler.getInputStream();
        //byte[] bytes = IOUtils.toByteArray(is);

        // b. with compression
        DataHandler handler = dataFile.getDataHandler();
        InputStream is = handler.getInputStream();
        byte[] compressedData = IOUtils.toByteArray(is);
        Inflater decompressor = new Inflater();
        decompressor.setInput(compressedData);
        ByteArrayOutputStream bos = new ByteArrayOutputStream(compressedData.length);
        byte[] buf = new byte[1024];
        while (!decompressor.finished()) {
            try {
                int count = decompressor.inflate(buf);
                bos.write(buf, 0, count);
            } catch (DataFormatException e) {
            }
        }
        try {
            bos.close();
        } catch (IOException e) {
        }
        byte[] bytes = bos.toByteArray();

        System.out.println("Received " + bytes.length + " bytes");
        // Now you can get dataFile.getFileName() and examine file's extension.
        // Based on this you can do further processing. For example, for *.fit
        // images (most images in PDS are FIT) you can render them using some 3rd
        // party library that can render images of this type.

        // 8. search with restriction.
        {
            System.out.println("\n8. search without and with restriction");

            // a) at first search without restriction to show what we have in order to
            // compare to version with restriction
            System.out.println("a) without restriction");
            String searchPattern = "data";
            System.out.println("search text = " + searchPattern + "\n");

            results = port.searchEntities(searchPattern, null);
            printSearchResults(results);

            /* the following datasets were found: (other found entities are not interesting in this example).
             entity name = GIOTTO RADIO SCIENCE EXPERIMENT DATA
                                      V1.0, id = 2
            entity name = IHW COMET IRSPEC CALIBRATED EXPERIMENT
                                              DATA RECORD GZ V1.0, id = 3
            entity name = SAKIGAKE INTERPLANETARY MAGNETIC FIELD
                                              DATA V 1.0, id = 5
            entity name = VEGA1 HALLEY FLYBY MAGNETOMETER DATA, id = 6
            entity name = VEGA1 TUNDE-M ENERGETIC PARTICLE
                                              ANALYSER DATA V1.0, id = 7
            entity name = DATABASE OF COMET POLARIMETRY, V1.0, id = 16
           */

            // b) apply restriction (select datasets with 'data' in its name from mission  'VEGA 1'
            System.out.println("b) with restriction");
            Restriction missionRestriction = new Restriction();
            missionRestriction.setRestrictionEntityClass("Mission");
            missionRestriction.setRestrictionEntityId(5L); // id 5 is for VEGA 1 in test database.

            PagedResults results2 = port.searchEntitiesByType("DataSet", searchPattern, null, missionRestriction);
            printPagedResults(results2);
            /*
              the following entities found:
             entity name = VEGA1 HALLEY FLYBY MAGNETOMETER DATA, id = 6
             entity name = VEGA1 TUNDE-M ENERGETIC PARTICLE
                                      ANALYSER DATA V1.0, id = 7
             */
        }

        System.exit(0);
    }

    static private void printPagedResults(PagedResults pagedResults) {
        System.out.println("\ttotal: " + pagedResults.getTotal());
        if (pagedResults.getResults() != null) {
            for (Object result : pagedResults.getResults()) {
                EntityInfo entityInfo = (EntityInfo)result;
                System.out.println("\tentity name = " + entityInfo.getName() + ", id = " + entityInfo.getId());
            }
        }
    }

    static private void printSearchResults(SearchResults searchResults) {
        System.out.println("found target types:");
        printPagedResults(searchResults.getTargetTypes());

        System.out.println("found targets:");
        printPagedResults(searchResults.getTargets());

        System.out.println("found missions:");
        printPagedResults(searchResults.getMissions());

        System.out.println("found instruments:");
        printPagedResults(searchResults.getInstruments());

        System.out.println("found datasets:");
        printPagedResults(searchResults.getDatasets());

        System.out.println("found data files:");
        printPagedResults(searchResults.getDataFiles());
    }

}
